FB.B.samples <- FB.B.samples[!FB.B.samples %in% "G057"] #revised FB.B.sample list
SRM.data.mean <- cbind.data.frame(rownames(SRM.data.screened.noPRTC), G001,G002,G003,G007,G008,G009,G110,G012,G013,G014,G015,G016,G017,G031,G032,G040,G041,G042,G043,G045,G047,G049,G053,G054,G055,G060,G062,G064,G066,G070,G071.A,G071.B,G073,G074,G079,G081,G104,G105,G109,G114,G116,G120,G122,G127,G128,G129,G132)
SRM.data.mean <- data.frame(SRM.data.mean[,-1], row.names=SRM.data.mean[,1]) #make first column row names, and delete first column
View(SRM.data.mean)
# Script #2 in data processing for NOT NORMALIZED DATA
#### 1. CREATE NMDS PLOT, MEAN OF TECH REPS - NOT LOG TRANSFORMED ########
#Transpose the file so that rows and columns are switched
SRM.data.mean.t <- t(SRM.data.mean) # t() function transposes, removes PRTC transitions & extraneous info
#Replace NA cells with 0; metaMDS() does not handle NA's
SRM.data.mean.t.noNA <- SRM.data.mean.t
SRM.data.mean.t.noNA[is.na(SRM.data.mean.t.noNA)] <- 0
#Make MDS dissimilarity matrix
SRM.mean.nmds <- metaMDS(SRM.data.mean.t.noNA, distance = 'bray', k = 2, trymax = 3000, autotransform = FALSE)
stressplot(SRM.mean.nmds)
plot(SRM.mean.nmds)
SRM.nmds.mean.samples <- scores(SRM.mean.nmds, display = "sites")
library(RColorBrewer)
marker = c("indianred1", "forestgreen", "turquoise3", "mediumpurple1")
ordiplot(SRM.mean.nmds, type="n", main="SRM NMDS, unzoomed")
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(-2.5,-0.3, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-3,1), ylim=c(-0.5,0.5), asp=NA, main="SRM NMDS, zoomed")
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(-2.5,0.4, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-3,1), ylim=c(-0.5,0.5), asp=NA, main="SRM NMDS, zoomed")
text(SRM.nmds.mean.samples[c(CI.B.samples),], label=rownames(SRM.nmds.mean.samples[c(CI.B.samples),]), col=marker[2], pch=8)
text(SRM.nmds.mean.samples[c(CI.E.samples),], label=rownames(SRM.nmds.mean.samples[c(CI.E.samples),]),  col=marker[2], pch=15)
text(SRM.nmds.mean.samples[c(PG.B.samples),], label=rownames(SRM.nmds.mean.samples[c(PG.B.samples),]),  col=marker[3], pch=8)
text(SRM.nmds.mean.samples[c(PG.E.samples),], label=rownames(SRM.nmds.mean.samples[c(PG.E.samples),]),  col=marker[3], pch=15)
text(SRM.nmds.mean.samples[c(WB.B.samples),], label=rownames(SRM.nmds.mean.samples[c(WB.B.samples),]),  col=marker[1], pch=8)
text(SRM.nmds.mean.samples[c(WB.E.samples),], label=rownames(SRM.nmds.mean.samples[c(WB.E.samples),]),  col=marker[1], pch=15)
text(SRM.nmds.mean.samples[c(FB.B.samples),], label=rownames(SRM.nmds.mean.samples[c(FB.B.samples),]),  col=marker[4], pch=8)
text(SRM.nmds.mean.samples[c(FB.E.samples),], label=rownames(SRM.nmds.mean.samples[c(CI.E.samples),]),  col=marker[4], pch=15)
legend(-2.5,0.4, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1.2,1), ylim=c(-0.2,0.2), asp=NA, main="Geoduck Gill NMDS, Similarity Plot", width=600,height=600)
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[2], pch=8, cex=2)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[2], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[3], pch=8, cex=2)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[3], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[1], pch=8, cex=2)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[1], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=8, cex=2)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15, cex=2)
legend(-1.2,-0.07, pch=c(rep(16,4), 8, 15), cex=1.1, pt.cex=1.3, legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
plot.default(x=NULL, y=NULL, type="n", xlab="Dimension 1", ylab="Dimension 2", xlim=c(-2.8,1), ylim=c(-0.4,0.2), asp=NA, main="Geoduck Gill NMDS, Similarity Plot", width=600,height=600, cex.axis=1.4, cex.lab=1.6)
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[2], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[2], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[3], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[3], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[1], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[1], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15, cex=2)
legend(-2.7,0.2, pch=c(rep(16,4)), cex=1.1, pt.cex=1.3, legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay"), col=c(marker[4], marker[3], marker[2], marker[1]))
#### Create plot with forced aspect ratio to zoom in, no eel/bare separation, no outliers ###
# png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-SRM-NMDS-plot-zoomed-no-outliers.png")
par(mar=c(5.1,4.8,4.1,2.1))
plot.default(x=NULL, y=NULL, type="n", xlab="Dimension 1", ylab="Dimension 2",  xlim=c(-1.2,1), ylim=c(-0.2,0.2), asp=NA, main="Geoduck Gill NMDS, Similarity Plot", width=600,height=600, cex.axis=1.4, cex.lab=1.6, cex.main=1.8)
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[2], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[2], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[3], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[3], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[1], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[1], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15, cex=2)
legend(-1.2,-0.07, pch=c(rep(15,4)), cex=1.6, pt.cex=2, legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay"), col=c(marker[4], marker[3], marker[2], marker[1]))
# dev.off()
SRM.data.mean.t.log <- SRM.data.mean.t
SRM.data.mean.t.log[is.na(SRM.data.mean.t.log)] <- 0
SRM.data.mean.t.log <- (SRM.data.mean.t.log+1)
SRM.data.mean.t.log <- data.trans(SRM.data.mean.t.log, method = 'log', plot = FALSE)
SRM.mean.log.nmds <- metaMDS(SRM.data.mean.t.log, distance = 'bray', k = 2, trymax = 3000, autotransform = FALSE)
stressplot(SRM.mean.log.nmds)
plot(SRM.mean.log.nmds)
SRM.nmds.mean.log.samples <- scores(SRM.mean.log.nmds, display = "sites")
# png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-SRM-NMDS-log-plot.png")
ordiplot(SRM.mean.log.nmds, type="n", main="SRM NMDS, log+1 transformed, unzoomed")
points(SRM.nmds.mean.log.samples[c(CI.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.log.samples[c(CI.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.log.samples[c(PG.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.log.samples[c(PG.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.log.samples[c(WB.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.log.samples[c(WB.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.log.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.log.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(-.3,-0.1, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
# dev.off()
# png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-SRM-NMDS-plot-log-zoomed.png")
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-.15,.15), ylim=c(-0.05,.06), asp=NA, main="SRM NMDS, log+1 transformed, zoomed")
points(SRM.nmds.mean.log.samples[c(CI.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.log.samples[c(CI.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.log.samples[c(PG.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.log.samples[c(PG.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.log.samples[c(WB.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.log.samples[c(WB.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.log.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.log.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(-.13,0.06, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
# dev.off()
################################################################################################################################
# RUN ANALYSIS OF SIMILARITY (ANOSIM) ON DIFFERENT ITERATIONS OF DATA
###### PREPARE DATA FOR ANOSIM ##########
CI.b <- data.frame(SAMPLE=CI.B.samples, SITE=rep("CI", times=length(CI.B.samples)), TREATMENT=rep("Bare", times=length(CI.B.samples)), BOTH=rep("CI-Bare", times=length(CI.B.samples)))
CI.e <- data.frame(SAMPLE=CI.E.samples, SITE=rep("CI", times=length(CI.E.samples)), TREATMENT=rep("Eelgrass", times=length(CI.E.samples)), BOTH=rep("CI-Eel", times=length(CI.E.samples)))
PG.b <- data.frame(SAMPLE=PG.B.samples, SITE=rep("PG", times=length(PG.B.samples)), TREATMENT=rep("Bare", times=length(PG.B.samples)), BOTH=rep("PG-Bare", times=length(PG.B.samples)))
PG.e <- data.frame(SAMPLE=PG.E.samples, SITE=rep("PG", times=length(PG.E.samples)), TREATMENT=rep("Eelgrass", times=length(PG.E.samples)), BOTH=rep("PG-Eel", times=length(PG.E.samples)))
WB.b <- data.frame(SAMPLE=WB.B.samples, SITE=rep("WB", times=length(WB.B.samples)), TREATMENT=rep("Bare", times=length(WB.B.samples)), BOTH=rep("WB-Bare", times=length(WB.B.samples)))
WB.e <- data.frame(SAMPLE=WB.E.samples, SITE=rep("WB", times=length(WB.E.samples)), TREATMENT=rep("Eelgrass", times=length(WB.E.samples)), BOTH=rep("WB-Eel", times=length(WB.E.samples)))
FB.b <- data.frame(SAMPLE=FB.B.samples, SITE=rep("FB", times=length(FB.B.samples)), TREATMENT=rep("Bare", times=length(FB.B.samples)), BOTH=rep("FB-Bare", times=length(FB.B.samples)))
FB.e <- data.frame(SAMPLE=FB.E.samples, SITE=rep("FB", times=length(FB.E.samples)), TREATMENT=rep("Eelgrass", times=length(FB.E.samples)), BOTH=rep("FB-Eel", times=length(FB.E.samples)))
FB.e
samples4anosim <- rbind.data.frame(CI.b, CI.e, PG.b, PG.e, WB.b, WB.e, FB.e, FB.b, stringsAsFactors = TRUE)
samples4anosim$SAMPLE <- as.character(samples4anosim$SAMPLE)
data4anosim <- cbind.data.frame(SRM.data.mean.t[order(rownames(SRM.data.mean.t)),], samples4anosim[order(samples4anosim$SAMPLE),])
data4anosim$SITE <- as.factor(data4anosim$SITE)
samples4anosim
samples4anosim$SAMPLE
data4anosim <- cbind.data.frame(SRM.data.mean.t[order(rownames(SRM.data.mean.t)),], samples4anosim[order(samples4anosim$SAMPLE),])
FB.b
FB.e
PG.g
PG.b
PG.e
View(sample.key.annotated)
PG.e
# Subset sample names for site & treatment combos
CI.E <- sample.key.annotated[c(sample.key.annotated$Sample.Shorthand == "CI-E"),]
CI.B <- sample.key.annotated[c(sample.key.annotated$Sample.Shorthand == "CI-B"),]
PG.E <- sample.key.annotated[c(sample.key.annotated$Sample.Shorthand == "PG-E"),]
PG.B <- sample.key.annotated[c(sample.key.annotated$Sample.Shorthand == "PG-B"),]
WB.E <- sample.key.annotated[c(sample.key.annotated$Sample.Shorthand == "WB-E"),]
WB.B <- sample.key.annotated[c(sample.key.annotated$Sample.Shorthand == "WB-B"),]
FB.E <- sample.key.annotated[c(sample.key.annotated$Sample.Shorthand == "FB-E"),]
FB.B <- sample.key.annotated[c(sample.key.annotated$Sample.Shorthand == "FB-B"),]
# Isolate just sample names for each site/treatment combo
CI.E.samples <- CI.E$PRVial
CI.B.samples <- CI.B$PRVial
PG.E.samples <- PG.E$PRVial
PG.B.samples <- PG.B$PRVial
WB.E.samples <- WB.E$PRVial
WB.B.samples <- WB.B$PRVial
FB.E.samples <- FB.E$PRVial
FB.B.samples <- FB.B$PRVial
Eelgrass.samples <- c(CI.E.samples, PG.E.samples, WB.E.samples, FB.E.samples)
Bare.samples <- c(CI.B.samples, PG.B.samples, WB.B.samples, FB.B.samples)
FB.B.samples <- FB.B.samples[!FB.B.samples %in% "G057"] #revised FB.B.sample list
CI.b <- data.frame(SAMPLE=CI.B.samples, SITE=rep("CI", times=length(CI.B.samples)), TREATMENT=rep("Bare", times=length(CI.B.samples)), BOTH=rep("CI-Bare", times=length(CI.B.samples)))
CI.e <- data.frame(SAMPLE=CI.E.samples, SITE=rep("CI", times=length(CI.E.samples)), TREATMENT=rep("Eelgrass", times=length(CI.E.samples)), BOTH=rep("CI-Eel", times=length(CI.E.samples)))
PG.b <- data.frame(SAMPLE=PG.B.samples, SITE=rep("PG", times=length(PG.B.samples)), TREATMENT=rep("Bare", times=length(PG.B.samples)), BOTH=rep("PG-Bare", times=length(PG.B.samples)))
PG.e <- data.frame(SAMPLE=PG.E.samples, SITE=rep("PG", times=length(PG.E.samples)), TREATMENT=rep("Eelgrass", times=length(PG.E.samples)), BOTH=rep("PG-Eel", times=length(PG.E.samples)))
WB.b <- data.frame(SAMPLE=WB.B.samples, SITE=rep("WB", times=length(WB.B.samples)), TREATMENT=rep("Bare", times=length(WB.B.samples)), BOTH=rep("WB-Bare", times=length(WB.B.samples)))
WB.e <- data.frame(SAMPLE=WB.E.samples, SITE=rep("WB", times=length(WB.E.samples)), TREATMENT=rep("Eelgrass", times=length(WB.E.samples)), BOTH=rep("WB-Eel", times=length(WB.E.samples)))
FB.b <- data.frame(SAMPLE=FB.B.samples, SITE=rep("FB", times=length(FB.B.samples)), TREATMENT=rep("Bare", times=length(FB.B.samples)), BOTH=rep("FB-Bare", times=length(FB.B.samples)))
FB.e <- data.frame(SAMPLE=FB.E.samples, SITE=rep("FB", times=length(FB.E.samples)), TREATMENT=rep("Eelgrass", times=length(FB.E.samples)), BOTH=rep("FB-Eel", times=length(FB.E.samples)))
samples4anosim <- rbind.data.frame(CI.b, CI.e, PG.b, PG.e, WB.b, WB.e, FB.e, FB.b, stringsAsFactors = TRUE)
samples4anosim$SAMPLE <- as.character(samples4anosim$SAMPLE)
data4anosim <- cbind.data.frame(SRM.data.mean.t[order(rownames(SRM.data.mean.t)),], samples4anosim[order(samples4anosim$SAMPLE),])
data4anosim$SITE <- as.factor(data4anosim$SITE)
data4anosim$TREATMENT <- as.factor(data4anosim$TREATMENT)
data4anosim$BOTH <- as.factor(data4anosim$BOTH)
sdms.vegdist <- vegdist(data4anosim[,-(ncol(data4anosim)-3):-(ncol(data4anosim))], 'bray', na.rm=TRUE) #this also removes the last 4 columns of data, since they are factors
site.anos<-anosim(sdms.vegdist, grouping=data4anosim$SITE, permutations = 2000)
summary(site.anos)
plot(site.anos)
treatment.anos<-anosim(sdms.vegdist, grouping=data4anosim$TREATMENT, permutations = 2000)
summary(treatment.anos)
plot(treatment.anos)
siteANDtreatment.anos<-anosim(sdms.vegdist, grouping=data4anosim$BOTH, permutations = 2000)
summary(siteANDtreatment.anos)
plot(siteANDtreatment.anos)
data4anosim.noNA <- cbind.data.frame(SRM.data.mean.t.noNA[order(rownames(SRM.data.mean.t.noNA)),], samples4anosim[order(samples4anosim$SAMPLE),])
sdms.noNA.vegdist <- vegdist(data4anosim.noNA[,-(ncol(data4anosim)-3):-(ncol(data4anosim))], 'bray', na.rm=TRUE)
site.noNA.anos<-anosim(sdms.vegdist, grouping=data4anosim.noNA$SITE, permutations = 2000)
summary(site.noNA.anos)
plot(site.noNA.anos)
treatment.noNA.anos<-anosim(sdms.noNA.vegdist, grouping=data4anosim.noNA$TREATMENT, permutations = 2000)
summary(treatment.noNA.anos)
plot(treatment.noNA.anos)
siteANDtreatment.noNA.anos <- anosim(sdms.noNA.vegdist, grouping=data4anosim.noNA$BOTH, permutations = 2000)
siteANDtreatment.noNA.anos
summary(siteANDtreatment.noNA.anos)
plot(siteANDtreatment.noNA.anos)
data4anosim.log <- cbind.data.frame(SRM.data.mean.t.log[order(rownames(SRM.data.mean.t.log)),], samples4anosim[order(samples4anosim$SAMPLE),])
sdms.log.vegdist <- vegdist(data4anosim.log[,-(ncol(data4anosim)-3):-(ncol(data4anosim))], 'bray', na.rm=TRUE)
site.log.anos<-anosim(sdms.log.vegdist, grouping=data4anosim.log$SITE, permutations = 2000)
summary(site.log.anos)
plot(site.log.anos)
treatment.log.anos<-anosim(sdms.log.vegdist, grouping=data4anosim.log$TREATMENT, permutations = 2000)
summary(treatment.log.anos)
plot(treatment.log.anos)
siteANDtreatment.log.anos <- anosim(sdms.log.vegdist, grouping=data4anosim.log$BOTH, permutations = 2000)
summary(siteANDtreatment.log.anos)
plot(siteANDtreatment.log.anos)
library(reshape2)
data.melted <- melt(data4anosim.noNA, id=c("SAMPLE", "SITE", "TREATMENT", "BOTH"), variable.name = "Transition", value.name = "Area")
SRM.proteins <- data.frame(SRM.data.screened.noPRTC[,1:4]) #protein name to each transition
SRM.proteins[,1] <- sub(" cds.*", "", SRM.proteins[,1])
data.melted.plus <- merge(x=data.melted, y=SRM.proteins, by.x = "Transition", by.y = "row.names", all.x=TRUE, all.y=FALSE)
colnames(data.melted.plus)[1] <- "Pep.Trans"
# Script #4 in data processing for NOT NORMALIZED DATA
######## Run ANOSIM for each protein separately. Requires reshape2() library
# Prepare data for anosim by protein, isolating the melted & annotated area data
Arachidonate <- data.melted.plus[grepl(c("Arachidonate"), data.melted.plus$Protein.Name),]
Catalase <- data.melted.plus[grepl(c("Catalase"), data.melted.plus$Protein.Name),]
Cytochrome <- data.melted.plus[grepl(c("Cytochrome"), data.melted.plus$Protein.Name),]
Glycogen <- data.melted.plus[grepl(c("Glycogen"), data.melted.plus$Protein.Name),]
HSP70 <- data.melted.plus[grepl(c("Heat shock 70"), data.melted.plus$Protein.Name),]
HSP90 <- data.melted.plus[grepl(c("HSP 90"), data.melted.plus$Protein.Name),]
Peroxiredoxin <- data.melted.plus[grepl(c("Peroxiredoxin"), data.melted.plus$Protein.Name),]
PDI <- data.melted.plus[grepl(c("Protein disulfide-isomerase"), data.melted.plus$Protein.Name),]
Puromycin <- data.melted.plus[grepl(c("Puromycin"), data.melted.plus$Protein.Name),]
Rab.11B <- data.melted.plus[grepl(c("Rab-11B"), data.melted.plus$Protein.Name),]
NAK <- data.melted.plus[grepl(c("Sodium/potassium"), data.melted.plus$Protein.Name),]
Superoxide <- data.melted.plus[grepl(c("Superoxide"), data.melted.plus$Protein.Name),]
Trifunctional <- data.melted.plus[grepl(c("Trifunctional"), data.melted.plus$Protein.Name),]
# Convert data to long form by casting it, making first column row names
Arachidonate.4anosim <- data.frame(merge(dcast(Arachidonate[,c(1,2,3,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE", all.y = TRUE), row.names = 1)
Catalase.4anosim <- data.frame(merge(dcast(Catalase[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Cytochrome.4anosim <- data.frame(merge(dcast(Cytochrome[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Glycogen.4anosim <- data.frame(merge(dcast(Glycogen[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
HSP70.4anosim <- data.frame(merge(dcast(HSP70[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
HSP90.4anosim <- data.frame(merge(dcast(HSP90[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Peroxiredoxin.4anosim <- data.frame(merge(dcast(Peroxiredoxin[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
PDI.4anosim <- data.frame(merge(dcast(PDI[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Puromycin.4anosim <- data.frame(merge(dcast(Puromycin[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Rab.11B.4anosim <- data.frame(merge(dcast(Rab.11B[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
NAK.4anosim <- data.frame(merge(dcast(NAK[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Superoxide.4anosim <- data.frame(merge(dcast(Superoxide[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Trifunctional.4anosim <- data.frame(merge(dcast(Trifunctional[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
# P=0.42129
Arachidonate.vegdist <- vegdist(Arachidonate.4anosim[,1:9], 'bray', na.rm=TRUE)
Arachidonate.ANOSIM <-anosim(Arachidonate.vegdist, Arachidonate.4anosim$SITE, permutations = 2000)
summary(Arachidonate.ANOSIM)
# png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-plot-ANOSIM%03d.png")
plot(Arachidonate.ANOSIM)
# P=0.74863
Catalase.vegdist <- vegdist(Catalase.4anosim[,1:9], 'bray', na.rm=TRUE)
Catalase.ANOSIM <-anosim(Catalase.vegdist, grouping=Catalase.4anosim$SITE, permutations = 2000)
summary(Catalase.ANOSIM)
# png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-plot-ANOSIM%03d.png")
plot(Catalase.ANOSIM)
# dev.off()
Catalase.vegdist <- vegdist(Catalase.4anosim[,1:9], 'bray', na.rm=TRUE)
Catalase.4anosim <- data.frame(merge(dcast(Catalase[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Catalase.vegdist <- vegdist(Catalase.4anosim[,1:9], 'bray', na.rm=TRUE)
Catalase <- data.melted.plus[grepl(c("Catalase"), data.melted.plus$Protein.Name),]
Catalase.4anosim <- data.frame(merge(dcast(Catalase[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Catalase.vegdist <- vegdist(Catalase.4anosim[,1:9], 'bray', na.rm=TRUE)
HSP70.vegdist <- vegdist(HSP70.4anosim[,1:6], 'bray', na.rm=TRUE)
HSP70 <- data.melted.plus[grepl(c("Heat shock 70"), data.melted.plus$Protein.Name),]
HSP70.4anosim <- data.frame(merge(dcast(HSP70[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Arachidonate <- data.melted.plus[grepl(c("Arachidonate"), data.melted.plus$Protein.Name),]
Arachidonate <- data.melted.plus[grepl(c("Arachidonate"), data.melted.plus$Protein.Name),]
View(Arachidonate)
View(Catalase)
Arachidonate <- data.melted.plus[grepl(c("Arachidonate"), data.melted.plus$Protein.Name),]
Catalase <- data.melted.plus[grepl(c("Catalase"), data.melted.plus$Protein.Name),]
Cytochrome <- data.melted.plus[grepl(c("Cytochrome"), data.melted.plus$Protein.Name),]
Glycogen <- data.melted.plus[grepl(c("Glycogen"), data.melted.plus$Protein.Name),]
HSP70 <- data.melted.plus[grepl(c("Heat shock 70"), data.melted.plus$Protein.Name),]
HSP90 <- data.melted.plus[grepl(c("HSP 90"), data.melted.plus$Protein.Name),]
Peroxiredoxin <- data.melted.plus[grepl(c("Peroxiredoxin"), data.melted.plus$Protein.Name),]
PDI <- data.melted.plus[grepl(c("Protein disulfide-isomerase"), data.melted.plus$Protein.Name),]
Puromycin <- data.melted.plus[grepl(c("Puromycin"), data.melted.plus$Protein.Name),]
Rab.11B <- data.melted.plus[grepl(c("Rab-11B"), data.melted.plus$Protein.Name),]
NAK <- data.melted.plus[grepl(c("Sodium/potassium"), data.melted.plus$Protein.Name),]
Superoxide <- data.melted.plus[grepl(c("Superoxide"), data.melted.plus$Protein.Name),]
Trifunctional <- data.melted.plus[grepl(c("Trifunctional"), data.melted.plus$Protein.Name),]
View(data.melted.plus)
View(data4anosim)
View(SRM.data)
Arachidonate <- data.melted.plus[grepl(c("Arachidonate"), data.melted.plus$Protein.Name),]
Catalase <- data.melted.plus[grepl(c("Catalase"), data.melted.plus$Protein.Name),]
Cytochrome <- data.melted.plus[grepl(c("Cytochrome"), data.melted.plus$Protein.Name),]
Glycogen <- data.melted.plus[grepl(c("Glycogen"), data.melted.plus$Protein.Name),]
HSP70 <- data.melted.plus[grepl(c("HSP70"), data.melted.plus$Protein.Name),]
HSP90 <- data.melted.plus[grepl(c("HSP90-alpha"), data.melted.plus$Protein.Name),]
Peroxiredoxin <- data.melted.plus[grepl(c("Peroxiredoxin"), data.melted.plus$Protein.Name),]
PDI <- data.melted.plus[grepl(c("PDI"), data.melted.plus$Protein.Name),]
Puromycin <- data.melted.plus[grepl(c("Puromycin-sensitive"), data.melted.plus$Protein.Name),]
Rab.11B <- data.melted.plus[grepl(c("Ras-related"), data.melted.plus$Protein.Name),]
NAK <- data.melted.plus[grepl(c("Sodium/potassium-transporting"), data.melted.plus$Protein.Name),]
Superoxide <- data.melted.plus[grepl(c("Superoxide"), data.melted.plus$Protein.Name),]
Trifunctional <- data.melted.plus[grepl(c("Trifunctional"), data.melted.plus$Protein.Name),]
View(HSP70)
Arachidonate.4anosim <- data.frame(merge(dcast(Arachidonate[,c(1,2,3,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE", all.y = TRUE), row.names = 1)
Catalase.4anosim <- data.frame(merge(dcast(Catalase[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Cytochrome.4anosim <- data.frame(merge(dcast(Cytochrome[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Glycogen.4anosim <- data.frame(merge(dcast(Glycogen[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
HSP70.4anosim <- data.frame(merge(dcast(HSP70[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
HSP90.4anosim <- data.frame(merge(dcast(HSP90[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Peroxiredoxin.4anosim <- data.frame(merge(dcast(Peroxiredoxin[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
PDI.4anosim <- data.frame(merge(dcast(PDI[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Puromycin.4anosim <- data.frame(merge(dcast(Puromycin[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Rab.11B.4anosim <- data.frame(merge(dcast(Rab.11B[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
NAK.4anosim <- data.frame(merge(dcast(NAK[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Superoxide.4anosim <- data.frame(merge(dcast(Superoxide[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Trifunctional.4anosim <- data.frame(merge(dcast(Trifunctional[,c(1,2,6)], SAMPLE~Pep.Trans), samples4anosim, by.x="SAMPLE", by.y="SAMPLE"), row.names = 1)
Arachidonate.vegdist <- vegdist(Arachidonate.4anosim[,1:9], 'bray', na.rm=TRUE)
Arachidonate.ANOSIM <-anosim(Arachidonate.vegdist, Arachidonate.4anosim$SITE, permutations = 2000)
summary(Arachidonate.ANOSIM)
plot(Arachidonate.ANOSIM)
Catalase.vegdist <- vegdist(Catalase.4anosim[,1:9], 'bray', na.rm=TRUE)
Catalase.ANOSIM <-anosim(Catalase.vegdist, grouping=Catalase.4anosim$SITE, permutations = 2000)
View(Catalase)
View(Catalase.4anosim)
View(Catalase.4anosim[1,])
Catalase.4anosim[1,]
View(Catalase.4anosim)
Catalase.vegdist <- vegdist(Catalase.4anosim[,1:6], 'bray', na.rm=TRUE)
Catalase.ANOSIM <-anosim(Catalase.vegdist, grouping=Catalase.4anosim$SITE, permutations = 2000)
summary(Catalase.ANOSIM)
plot(Catalase.ANOSIM)
Cytochrome.vegdist <- vegdist(Cytochrome.4anosim[,1:9], 'bray', na.rm=TRUE)
Cytochrome.ANOSIM <-anosim(Cytochrome.vegdist, grouping=Cytochrome.4anosim$SITE, permutations = 2000)
summary(Cytochrome.ANOSIM)
plot(Cytochrome.ANOSIM)
Glycogen.vegdist <- vegdist(Glycogen.4anosim[,1:9], 'bray', na.rm=TRUE)
Glycogen.ANOSIM <-anosim(Glycogen.vegdist, grouping=Glycogen.4anosim$SITE, permutations = 2000)
summary(Glycogen.ANOSIM)
plot(Glycogen.ANOSIM)
HSP70.vegdist <- vegdist(HSP70.4anosim[,1:6], 'bray', na.rm=TRUE)
HSP70.ANOSIM <-anosim(HSP70.vegdist, grouping=HSP70.4anosim$SITE, permutations = 2000)
summary(HSP70.ANOSIM)
plot(HSP70.ANOSIM)
HSP90.vegdist <- vegdist(HSP90.4anosim[,1:9], 'bray', na.rm=TRUE)
HSP90.ANOSIM <-anosim(HSP90.vegdist, grouping=HSP90.4anosim$SITE, permutations = 2000)
summary(HSP90.ANOSIM)
plot(HSP90.ANOSIM)
Peroxiredoxin.vegdist <- vegdist(Peroxiredoxin.4anosim[,1:3], 'bray', na.rm=TRUE)
Peroxiredoxin.ANOSIM <-anosim(Peroxiredoxin.vegdist, grouping=Peroxiredoxin.4anosim$SITE, permutations = 2000)
summary(Peroxiredoxin.ANOSIM)
plot(Peroxiredoxin.ANOSIM)
PDI.vegdist <- vegdist(PDI.4anosim[,1:6], 'bray', na.rm=TRUE)
PDI.ANOSIM <-anosim(PDI.vegdist, grouping=PDI.4anosim$SITE, permutations = 2000)
summary(PDI.ANOSIM)
plot(PDI.ANOSIM)
Puromycin.vegdist <- vegdist(Puromycin.4anosim[,1:9], 'bray', na.rm=TRUE)
Puromycin.ANOSIM <-anosim(Puromycin.vegdist, grouping=Puromycin.4anosim$SITE, permutations = 2000)
summary(Puromycin.ANOSIM)
plot(PDI.ANOSIM)
plot(Puromycin.ANOSIM)
Rab.11B.vegdist <- vegdist(Rab.11B.4anosim[,1:3], 'bray', na.rm=TRUE)
Rab.11B.ANOSIM <-anosim(Rab.11B.vegdist, grouping=Rab.11B.4anosim$SITE, permutations = 2000)
summary(Rab.11B.ANOSIM)
plot(Rab.11B.ANOSIM)
NAK.vegdist <- vegdist(NAK.4anosim[,1:6], 'bray', na.rm=TRUE)
NAK.ANOSIM <-anosim(NAK.vegdist, grouping=NAK.4anosim$SITE, permutations = 2000)
summary(NAK.ANOSIM)
plot(NAK.ANOSIM)
Superoxide.vegdist <- vegdist(Superoxide.4anosim[,1:5], 'bray', na.rm=TRUE)
Superoxide.ANOSIM <-anosim(Superoxide.vegdist, grouping=Superoxide.4anosim$SITE, permutations = 2000)
summary(Superoxide.ANOSIM)
plot(Superoxide.ANOSIM)
View(Trifunctional.4anosim)
Trifunctional.vegdist <- vegdist(Trifunctional.4anosim[,1:9], 'bray', na.rm=TRUE)
Trifunctional.ANOSIM <-anosim(Trifunctional.vegdist, grouping=Trifunctional.4anosim$SITE, permutations = 2000)
summary(Trifunctional.ANOSIM)
plot(Trifunctional.ANOSIM)
library(ggplot2)
levels(data.melted.plus$SITE)
data.melted.plus$SITE <- factor(data.melted.plus$SITE, levels=c("WB", "CI", "PG", "FB"))
ggplot(subset(data.melted.plus, Pep.Trans %in% "GVVDSEDLPLNISR y7"), aes(x=SITE, y=Area, fill=SITE)) +
geom_boxplot(color="black", position = position_dodge()) +
ggtitle("Heat shock 90 \nabundance by site") +
theme(plot.title = element_text(size=22), axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
guides(fill=FALSE) +
scale_fill_discrete(labels=c("Willapa Bay", "Case Inlet", "Fidalgo Bay", "Port Gamble")) +
ylab("Protein Abundance (Peak Intensity)") +
coord_flip()
ggplot(subset(data.melted.plus, Pep.Trans %in% "IINEPTAAALAYGLDK y12"), aes(x=SITE, y=Area, fill=SITE)) +
geom_boxplot(color="black", position = position_dodge()) +
ggtitle("Heat shock 70 \nabundance by site") +
theme(plot.title = element_text(size=22), axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
guides(fill=FALSE) +
scale_fill_discrete(labels=c("Willapa Bay", "Case Inlet", "Fidalgo Bay", "Port Gamble")) +
ylab("Protein Abundance (Peak Intensity)") +
coord_flip()
ggplot(subset(data.melted.plus, Pep.Trans %in% "DNVVVIGFFK y5"), aes(x=SITE, y=Area, fill=SITE)) +
geom_boxplot(color="black", position = position_dodge()) +
ggtitle("Protein Disulfide Isomerase \nabundance by site") +
theme(plot.title = element_text(size=22), axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
guides(fill=FALSE) +
scale_fill_discrete(labels=c("Willapa Bay", "Case Inlet", "Fidalgo Bay", "Port Gamble")) +
ylab("Protein Abundance (Peak Intensity)") +
coord_flip()
setwd("~/Documents/Roberts Lab/O.lurida_Stress/Data")
Histo <- read.csv("2017-Oly-Histo-Results.csv", header=T, stringsAsFactors = F)
str(Histo)
table(Histo$Stage)
table(Histo$)
table(Histo$Sex)
counts.temp <- count(df=subset(Histo, Phase %in% "TEMP"), c("Phase", "Treatment", "Stage"))
counts.OA <- count(df=subset(Histo, Phase %in% "OA"), c("Phase", "Treatment", "Stage"))
libary(plyr)
library(plyr)
counts.temp <- count(df=subset(Histo, Phase %in% "TEMP"), c("Phase", "Treatment", "Stage"))
counts.OA <- count(df=subset(Histo, Phase %in% "OA"), c("Phase", "Treatment", "Stage"))
counts.all <- count(df=Histo, c("Phase", "Treatment", "Stage"))
Histo.6 <- subset(Histo, Phase %in% "TEMP" & Treatment %in% "6")
Histo.10 <- subset(Histo, Phase %in% "TEMP" & Treatment %in% "10")
Histo.6.Low <- subset(Histo, Phase %in% "OA" & Treatment %in% "6-Low")
Histo.6.Amb <- subset(Histo, Phase %in% "OA" & Treatment %in% "6-Amb")
Histo.10.Low <- subset(Histo, Phase %in% "OA" & Treatment %in% "10-Low")
Histo.10.Amb <- subset(Histo, Phase %in% "OA" & Treatment %in% "10-Amb")
Pct.6 <- data.frame(unclass(100*prop.table(table(Histo.6$Stage))))
Pct.10 <- data.frame(unclass(100*prop.table(table(Histo.10$Stage))))
Pct.6.Low <- data.frame(unclass(100*prop.table(table(Histo.6.Low$Stage))))
Pct.6.Amb <- data.frame(unclass(100*prop.table(table(Histo.6.Amb$Stage))))
Pct.10.Low <- data.frame(unclass(100*prop.table(table(Histo.10.Low$Stage))))
Pct.10.Amb <- data.frame(unclass(100*prop.table(table(Histo.10.Amb$Stage))))
stage.stats <- data.frame(cbind(Pct.6, Pct.10, Pct.6.Low, Pct.6.Amb, Pct.10.Low, Pct.10.Amb))
colnames(stage.stats) <- c("6", "10", "6.Low", "6.Amb", "10.Low", "10.Amb")
Stages <- c("Stage 1", "Stage 2", "Stage 3")
par(mfrow = c(3, 2), mar=c(.5,1,2,0.5), oma=c(1,2,3,1))
pie(table(Histo.6$Stage), main="6 DegC", radius=1, labels=paste(Stages, "\n", table(Histo.6$Stage), ", ", round(stage.stats$`6`), "%", sep=""))
pie(table(Histo.10$Stage), main="10 DegC", radius=1, labels=paste(Stages, "\n", table(Histo.10$Stage), ", ", round(stage.stats$`10`), "%", sep=""))
pie(table(Histo.6.Low$Stage), main="6 DegC, Low pH", radius=1, labels=paste(Stages, "\n", table(Histo.6.Low$Stage), ", ", round(stage.stats$`6.Low`), "%", sep=""))
pie(table(Histo.6.Amb$Stage), main="6 DegC, Amb pH", radius=1, labels=paste(Stages, "\n", table(Histo.6.Amb$Stage), ", ", round(stage.stats$`6.Amb`), "%", sep=""))
pie(table(Histo.10.Low$Stage), main="10 DegC, Low pH", radius=1, labels=paste(Stages, "\n", table(Histo.10.Low$Stage), ", ", round(stage.stats$`10.Low`), "%", sep=""))
pie(table(Histo.10.Amb$Stage), main="10 DegC, Amp pH", radius=1, labels=paste(Stages, "\n", table(Histo.10.Amb$Stage), ", ", round(stage.stats$`10.Amb`), "%", sep=""))
title("Gonad Stage by Treatment, all Populations \nOstrea lurida Pre-Conditioning Experiment", outer=TRUE)
par(mfrow = c(3, 2), mar=c(.5,1,2,0.5), oma=c(1,2,3,1))
pie(table(Histo.6$Stage), main="6 DegC", radius=1, labels=paste(Stages, "\n", table(Histo.6$Stage), ", ", round(stage.stats$`6`), "%", sep=""))
par(mfrow = c(3, 2), mar=c(.5,1,2,0.5), oma=c(1,2,3,1))
pie(table(Histo.6$Stage), main="6 DegC", radius=1, labels=paste(Stages, "\n", table(Histo.6$Stage), ", ", round(stage.stats$`6`), "%", sep=""))
pie(table(Histo.10$Stage), main="10 DegC", radius=1, labels=paste(Stages, "\n", table(Histo.10$Stage), ", ", round(stage.stats$`10`), "%", sep=""))
pie(table(Histo.6.Low$Stage), main="6 DegC, Low pH", radius=1, labels=paste(Stages, "\n", table(Histo.6.Low$Stage), ", ", round(stage.stats$`6.Low`), "%", sep=""))
pie(table(Histo.10.Low$Stage), main="10 DegC, Low pH", radius=1, labels=paste(Stages, "\n", table(Histo.10.Low$Stage), ", ", round(stage.stats$`10.Low`), "%", sep=""))
pie(table(Histo.6.Amb$Stage), main="6 DegC, Amb pH", radius=1, labels=paste(Stages, "\n", table(Histo.6.Amb$Stage), ", ", round(stage.stats$`6.Amb`), "%", sep=""))
pie(table(Histo.10.Amb$Stage), main="10 DegC, Amp pH", radius=1, labels=paste(Stages, "\n", table(Histo.10.Amb$Stage), ", ", round(stage.stats$`10.Amb`), "%", sep=""))
title("Gonad Stage by Treatment, all Populations \nOstrea lurida Pre-Conditioning Experiment", outer=TRUE)
setwd("~/Documents/Roberts Lab/O.lurida_Stress/Data")
Histo <- read.csv("2017-Oly-Histo-Results.csv", header=T, stringsAsFactors = F)
library(plyr)
table(Histo$Stage)
table(Histo$Sex)
# Histo$Stage <- as.factor(Histo$Stage)
counts.temp <- count(df=subset(Histo, Phase %in% "TEMP"), c("Phase", "Treatment", "Stage"))
counts.OA <- count(df=subset(Histo, Phase %in% "OA"), c("Phase", "Treatment", "Stage"))
counts.all <- count(df=Histo, c("Phase", "Treatment", "Stage"))
# counts.temp$percent <-
Histo.6 <- subset(Histo, Phase %in% "TEMP" & Treatment %in% "6")
Histo.10 <- subset(Histo, Phase %in% "TEMP" & Treatment %in% "10")
Histo.6.Low <- subset(Histo, Phase %in% "OA" & Treatment %in% "6-Low")
Histo.6.Amb <- subset(Histo, Phase %in% "OA" & Treatment %in% "6-Amb")
Histo.10.Low <- subset(Histo, Phase %in% "OA" & Treatment %in% "10-Low")
Histo.10.Amb <- subset(Histo, Phase %in% "OA" & Treatment %in% "10-Amb")
Pct.6 <- data.frame(unclass(100*prop.table(table(Histo.6$Stage))))
Pct.10 <- data.frame(unclass(100*prop.table(table(Histo.10$Stage))))
Pct.6.Low <- data.frame(unclass(100*prop.table(table(Histo.6.Low$Stage))))
Pct.6.Amb <- data.frame(unclass(100*prop.table(table(Histo.6.Amb$Stage))))
Pct.10.Low <- data.frame(unclass(100*prop.table(table(Histo.10.Low$Stage))))
Pct.10.Amb <- data.frame(unclass(100*prop.table(table(Histo.10.Amb$Stage))))
stage.stats <- data.frame(cbind(Pct.6, Pct.10, Pct.6.Low, Pct.6.Amb, Pct.10.Low, Pct.10.Amb))
colnames(stage.stats) <- c("6", "10", "6.Low", "6.Amb", "10.Low", "10.Amb")
Stages <- c("Stage 1", "Stage 2", "Stage 3")
par(mfrow = c(3, 2), mar=c(.5,1,2,0.5), oma=c(1,2,3,1))
pie(table(Histo.6$Stage), main="6 DegC", radius=1, labels=paste(Stages, "\n", table(Histo.6$Stage), ", ", round(stage.stats$`6`), "%", sep=""))
pie(table(Histo.10$Stage), main="10 DegC", radius=1, labels=paste(Stages, "\n", table(Histo.10$Stage), ", ", round(stage.stats$`10`), "%", sep=""))
pie(table(Histo.6.Low$Stage), main="6 DegC, Low pH", radius=1, labels=paste(Stages, "\n", table(Histo.6.Low$Stage), ", ", round(stage.stats$`6.Low`), "%", sep=""))
pie(table(Histo.10.Low$Stage), main="10 DegC, Low pH", radius=1, labels=paste(Stages, "\n", table(Histo.10.Low$Stage), ", ", round(stage.stats$`10.Low`), "%", sep=""))
pie(table(Histo.6.Amb$Stage), main="6 DegC, Amb pH", radius=1, labels=paste(Stages, "\n", table(Histo.6.Amb$Stage), ", ", round(stage.stats$`6.Amb`), "%", sep=""))
pie(table(Histo.10.Amb$Stage), main="10 DegC, Amp pH", radius=1, labels=paste(Stages, "\n", table(Histo.10.Amb$Stage), ", ", round(stage.stats$`10.Amb`), "%", sep=""))
title("Gonad Stage by Treatment, all Populations \nOstrea lurida Pre-Conditioning Experiment", outer=TRUE)
png(filename = "Gonad-Stage-Pie-Charts.png")
par(mfrow = c(3, 2), mar=c(.5,1,2,0.5), oma=c(1,2,3,1))
pie(table(Histo.6$Stage), main="6 DegC", radius=1, labels=paste(Stages, "\n", table(Histo.6$Stage), ", ", round(stage.stats$`6`), "%", sep=""))
pie(table(Histo.10$Stage), main="10 DegC", radius=1, labels=paste(Stages, "\n", table(Histo.10$Stage), ", ", round(stage.stats$`10`), "%", sep=""))
pie(table(Histo.6.Low$Stage), main="6 DegC, Low pH", radius=1, labels=paste(Stages, "\n", table(Histo.6.Low$Stage), ", ", round(stage.stats$`6.Low`), "%", sep=""))
pie(table(Histo.10.Low$Stage), main="10 DegC, Low pH", radius=1, labels=paste(Stages, "\n", table(Histo.10.Low$Stage), ", ", round(stage.stats$`10.Low`), "%", sep=""))
pie(table(Histo.6.Amb$Stage), main="6 DegC, Amb pH", radius=1, labels=paste(Stages, "\n", table(Histo.6.Amb$Stage), ", ", round(stage.stats$`6.Amb`), "%", sep=""))
pie(table(Histo.10.Amb$Stage), main="10 DegC, Amp pH", radius=1, labels=paste(Stages, "\n", table(Histo.10.Amb$Stage), ", ", round(stage.stats$`10.Amb`), "%", sep=""))
title("Gonad Stage by Treatment, all Populations \nOstrea lurida 2016-2017 Experiment", outer=TRUE)
dev.off()
getwd()
png(filename = "Gonad-Stage-Pie-Charts.png", width = 600, height = 800)
par(mfrow = c(3, 2), mar=c(.5,1,2,0.5), oma=c(1,2,3,1))
pie(table(Histo.6$Stage), main="6 DegC", radius=1, labels=paste(Stages, "\n", table(Histo.6$Stage), ", ", round(stage.stats$`6`), "%", sep=""))
pie(table(Histo.10$Stage), main="10 DegC", radius=1, labels=paste(Stages, "\n", table(Histo.10$Stage), ", ", round(stage.stats$`10`), "%", sep=""))
pie(table(Histo.6.Low$Stage), main="6 DegC, Low pH", radius=1, labels=paste(Stages, "\n", table(Histo.6.Low$Stage), ", ", round(stage.stats$`6.Low`), "%", sep=""))
pie(table(Histo.10.Low$Stage), main="10 DegC, Low pH", radius=1, labels=paste(Stages, "\n", table(Histo.10.Low$Stage), ", ", round(stage.stats$`10.Low`), "%", sep=""))
pie(table(Histo.6.Amb$Stage), main="6 DegC, Amb pH", radius=1, labels=paste(Stages, "\n", table(Histo.6.Amb$Stage), ", ", round(stage.stats$`6.Amb`), "%", sep=""))
pie(table(Histo.10.Amb$Stage), main="10 DegC, Amp pH", radius=1, labels=paste(Stages, "\n", table(Histo.10.Amb$Stage), ", ", round(stage.stats$`10.Amb`), "%", sep=""))
title("Gonad Stage by Treatment, all Populations \nOstrea lurida 2016-2017 Experiment", outer=TRUE)
dev.off()
getwd()
png(filename = "~/Documents/Roberts Lab/O.lurida_Stress/Analyses/Gonad-Stage-Pie-Charts.png", width = 600, height = 800)
par(mfrow = c(3, 2), mar=c(.5,1,2,0.5), oma=c(1,2,3,1))
pie(table(Histo.6$Stage), main="6 DegC", radius=1, labels=paste(Stages, "\n", table(Histo.6$Stage), ", ", round(stage.stats$`6`), "%", sep=""))
pie(table(Histo.10$Stage), main="10 DegC", radius=1, labels=paste(Stages, "\n", table(Histo.10$Stage), ", ", round(stage.stats$`10`), "%", sep=""))
pie(table(Histo.6.Low$Stage), main="6 DegC, Low pH", radius=1, labels=paste(Stages, "\n", table(Histo.6.Low$Stage), ", ", round(stage.stats$`6.Low`), "%", sep=""))
pie(table(Histo.10.Low$Stage), main="10 DegC, Low pH", radius=1, labels=paste(Stages, "\n", table(Histo.10.Low$Stage), ", ", round(stage.stats$`10.Low`), "%", sep=""))
pie(table(Histo.6.Amb$Stage), main="6 DegC, Amb pH", radius=1, labels=paste(Stages, "\n", table(Histo.6.Amb$Stage), ", ", round(stage.stats$`6.Amb`), "%", sep=""))
pie(table(Histo.10.Amb$Stage), main="10 DegC, Amp pH", radius=1, labels=paste(Stages, "\n", table(Histo.10.Amb$Stage), ", ", round(stage.stats$`10.Amb`), "%", sep=""))
title("Gonad Stage by Treatment, all Populations \nOstrea lurida 2016-2017 Experiment", outer=TRUE)
dev.off()
